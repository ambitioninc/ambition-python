#!/usr/bin/env python
# coding: utf-8

"""
ApivaccountApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class ApivaccountApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('http://localhost:8080/')
            self.api_client = configuration.api_client
    
    
    def public_api_account_list(self, **kwargs):
        """
        Return a list of accounts
        The Account API  <br/>Return a list of accounts.

        
        :return: AccountApiSerializer
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_account_list" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/account'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='AccountApiSerializer', auth_settings=auth_settings)
        
        return response
        
    def public_api_account_create(self, username, first_name, last_name, time_zone, email, **kwargs):
        """
        Create a new account
        The Account API  <br/>Create a new account

        :param str username:  (required)
        :param int superior: The id for the account's superior 
        :param str first_name:  (required)
        :param str last_name:  (required)
        :param str time_zone:  (required)
        :param bool is_manager:  
        :param str email:  (required)
        :param str password:  
        
        :return: AccountApiSerializer
        """
        
        # verify the required parameter 'username' is set
        if username is None:
            raise ValueError("Missing the required parameter `username` when calling `public_api_account_create`")
        
        # verify the required parameter 'first_name' is set
        if first_name is None:
            raise ValueError("Missing the required parameter `first_name` when calling `public_api_account_create`")
        
        # verify the required parameter 'last_name' is set
        if last_name is None:
            raise ValueError("Missing the required parameter `last_name` when calling `public_api_account_create`")
        
        # verify the required parameter 'time_zone' is set
        if time_zone is None:
            raise ValueError("Missing the required parameter `time_zone` when calling `public_api_account_create`")
        
        # verify the required parameter 'email' is set
        if email is None:
            raise ValueError("Missing the required parameter `email` when calling `public_api_account_create`")
        
        all_params = ['username', 'superior', 'first_name', 'last_name', 'time_zone', 'is_manager', 'email', 'password']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_account_create" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/account'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'username' in params:
            form_params['username'] = params['username']
        
        if 'superior' in params:
            form_params['superior'] = params['superior']
        
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        
        if 'time_zone' in params:
            form_params['time_zone'] = params['time_zone']
        
        if 'is_manager' in params:
            form_params['is_manager'] = params['is_manager']
        
        if 'email' in params:
            form_params['email'] = params['email']
        
        if 'password' in params:
            form_params['password'] = params['password']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='AccountApiSerializer', auth_settings=auth_settings)
        
        return response
        
    def public_api_account_retrieve(self, pk, **kwargs):
        """
        Return a single account
        The Account API  <br/>Return a single account.

        :param str pk:  (required)
        
        :return: AccountApiSerializer
        """
        
        # verify the required parameter 'pk' is set
        if pk is None:
            raise ValueError("Missing the required parameter `pk` when calling `public_api_account_retrieve`")
        
        all_params = ['pk']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_account_retrieve" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/account/{pk}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'pk' in params:
            path_params['pk'] = params['pk']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='AccountApiSerializer', auth_settings=auth_settings)
        
        return response
        
    def public_api_account_update(self, pk, username, first_name, last_name, email, password, **kwargs):
        """
        The Account API
        The Account API

        :param str pk:  (required)
        :param str username:  (required)
        :param str superior:  
        :param str first_name:  (required)
        :param str last_name:  (required)
        :param str time_zone:  
        :param bool is_manager:  
        :param str email:  (required)
        :param str password:  (required)
        
        :return: AccountApiSerializer
        """
        
        # verify the required parameter 'pk' is set
        if pk is None:
            raise ValueError("Missing the required parameter `pk` when calling `public_api_account_update`")
        
        # verify the required parameter 'username' is set
        if username is None:
            raise ValueError("Missing the required parameter `username` when calling `public_api_account_update`")
        
        # verify the required parameter 'first_name' is set
        if first_name is None:
            raise ValueError("Missing the required parameter `first_name` when calling `public_api_account_update`")
        
        # verify the required parameter 'last_name' is set
        if last_name is None:
            raise ValueError("Missing the required parameter `last_name` when calling `public_api_account_update`")
        
        # verify the required parameter 'email' is set
        if email is None:
            raise ValueError("Missing the required parameter `email` when calling `public_api_account_update`")
        
        # verify the required parameter 'password' is set
        if password is None:
            raise ValueError("Missing the required parameter `password` when calling `public_api_account_update`")
        
        all_params = ['pk', 'username', 'superior', 'first_name', 'last_name', 'time_zone', 'is_manager', 'email', 'password']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_account_update" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/account/{pk}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        
        if 'pk' in params:
            path_params['pk'] = params['pk']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'username' in params:
            form_params['username'] = params['username']
        
        if 'superior' in params:
            form_params['superior'] = params['superior']
        
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        
        if 'time_zone' in params:
            form_params['time_zone'] = params['time_zone']
        
        if 'is_manager' in params:
            form_params['is_manager'] = params['is_manager']
        
        if 'email' in params:
            form_params['email'] = params['email']
        
        if 'password' in params:
            form_params['password'] = params['password']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='AccountApiSerializer', auth_settings=auth_settings)
        
        return response
        
    def public_api_account_destroy(self, pk, **kwargs):
        """
        The Account API
        The Account API

        :param str pk:  (required)
        
        :return: AccountApiSerializer
        """
        
        # verify the required parameter 'pk' is set
        if pk is None:
            raise ValueError("Missing the required parameter `pk` when calling `public_api_account_destroy`")
        
        all_params = ['pk']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_account_destroy" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/account/{pk}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        
        if 'pk' in params:
            path_params['pk'] = params['pk']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='AccountApiSerializer', auth_settings=auth_settings)
        
        return response
        
    def public_api_account_partial_update(self, pk, **kwargs):
        """
        The Account API
        The Account API

        :param str pk:  (required)
        :param str username:  
        :param str superior:  
        :param str first_name:  
        :param str last_name:  
        :param str time_zone:  
        :param bool is_manager:  
        :param str email:  
        :param str password:  
        
        :return: AccountApiSerializer
        """
        
        # verify the required parameter 'pk' is set
        if pk is None:
            raise ValueError("Missing the required parameter `pk` when calling `public_api_account_partial_update`")
        
        all_params = ['pk', 'username', 'superior', 'first_name', 'last_name', 'time_zone', 'is_manager', 'email', 'password']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_account_partial_update" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/account/{pk}'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        
        if 'pk' in params:
            path_params['pk'] = params['pk']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'username' in params:
            form_params['username'] = params['username']
        
        if 'superior' in params:
            form_params['superior'] = params['superior']
        
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        
        if 'time_zone' in params:
            form_params['time_zone'] = params['time_zone']
        
        if 'is_manager' in params:
            form_params['is_manager'] = params['is_manager']
        
        if 'email' in params:
            form_params['email'] = params['email']
        
        if 'password' in params:
            form_params['password'] = params['password']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='AccountApiSerializer', auth_settings=auth_settings)
        
        return response
        









