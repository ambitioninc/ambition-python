#!/usr/bin/env python
# coding: utf-8

"""
DataApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

class DataApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
    
    
    def public_api_data_type_list_list(self, **kwargs):
        """
        Returns a list of supported data types
        The Data Types API  <br/>Returns a list of supported data types

        
        :return: DepotSerializer
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_data_type_list_list" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/data/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='DepotSerializer')
        
        return response
        
    def public_api_data_list(self, data_type, **kwargs):
        """
        Returns a description of a data type and its schema
        The Data API  <br/>Returns a description of a data type and its schema

        :param str data_type: The id of the data type. Refer to the data types API for available types (required)
        
        :return: PublicApiDataListResponse
        """
        
        # verify the required parameter 'data_type' is set
        if data_type is None:
            raise ValueError("Missing the required parameter `data_type` when calling `public_api_data_list`")
        
        all_params = ['data_type']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_data_list" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/data/{data_type}/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'data_type' in params:
            path_params['data_type'] = params['data_type']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='PublicApiDataListResponse')
        
        return response
        
    def public_api_data_create(self, data_type, body, **kwargs):
        """
        Uploads a list of data objects
        The Data API  <br/>Uploads a list of data objects

        :param str data_type:  (required)
        :param Serializer body: A list of data records. (required)
        
        :return: PublicApiDataCreateResponse
        """
        
        # verify the required parameter 'data_type' is set
        if data_type is None:
            raise ValueError("Missing the required parameter `data_type` when calling `public_api_data_create`")
        
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `public_api_data_create`")
        
        all_params = ['data_type', 'body']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method public_api_data_create" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/data/{data_type}/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        if 'data_type' in params:
            path_params['data_type'] = params['data_type']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        if 'body' in params:
            body_params = params['body']
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/json', 'text/csv', 'application/vnd.ms-excel'])

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='PublicApiDataCreateResponse')
        
        return response
        









